const { KeyAndApi } = require('../../config/constants');
const path = require('path');
const fs = require('fs').promises;
const axios = require('axios');
const _ = require('lodash');
const readXlsxFile = require('read-excel-file/node');
const { getSortByProduct } = require('../sortByProduct');

// Thay th·∫ø vi·ªác s·ª≠ d·ª•ng SortByProduct t·ª´ constants
let SortByProduct = {
    variant_orderId_sku: [],
    nameId_orderId_sku: [],
    width_orderId_sku: []
};

async function initializeSortByProduct() {
    try {
        SortByProduct = await getSortByProduct();
    } catch (error) {
        console.error('Error initializing SortByProduct:', error);
        // Kh√¥ng c·∫ßn set l·∫°i gi√° tr·ªã m·∫∑c ƒë·ªãnh v√¨ ƒë√£ c√≥ s·∫µn
    }
}

// G·ªçi h√†m kh·ªüi t·∫°o khi module ƒë∆∞·ª£c load
initializeSortByProduct().catch(console.error);

// Th√™m h√†m ƒë·ªÉ refresh data khi c·∫ßn
async function refreshSortByProduct() {
    await initializeSortByProduct();
}

/**
 * L·∫•y d·ªØ li·ªáu GLLM t·ª´ API
 * @returns {Promise<Array>} M·∫£ng d·ªØ li·ªáu GLLM ƒë√£ ƒë∆∞·ª£c x·ª≠ l√Ω
 */
async function FetchGLLM() {
    try {
        const url = KeyAndApi.gllm;
        const response = await axios.get(url);

        // L·ªçc b·ªè c√°c item kh√¥ng h·ª£p l·ªá
        const GLLM = response.data.filter(item =>
            item.variant && item.variant !== "" &&
            item.ProductType && item.ProductType !== ""
        );

        // X·ª≠ l√Ω d·ªØ li·ªáu
        return GLLM.map(item => ({
            ...item,
            ProductType: item.ProductType.toLowerCase().trim().replace(/ /g, '').split(","),
            variant: item.variant.toLowerCase().trim().replace(/ /g, '').split(",")
        }));
    } catch (error) {
        console.error('Error fetching GLLM:', error);
        throw error;
    }
}

/**
 * ƒê·ªçc v√† x·ª≠ l√Ω file Excel
 * @param {string|Buffer} url - ƒê∆∞·ªùng d·∫´n file Excel ho·∫∑c buffer data
 * @returns {Promise<Array>} M·∫£ng d·ªØ li·ªáu ƒë√£ ƒë∆∞·ª£c x·ª≠ l√Ω
 */
async function FetchXLSX(url) {
    try {
        const rows = await readXlsxFile(url);

        // Map d·ªØ li·ªáu t·ª´ Excel
        const newSheet = rows.map(item => ({
            orderId: item[0],
            barcode: item[1],
            sku: item[2],
            Quantity: item[3],
            variant: item[4],
            product: item[5],
            country: item[6],
            partner: item[7],
            urlDesign: item[8],
            dateItem: item[9],
            orderName: item[10],
            note: item[11],
            location: item[12],
            ItemBarcode: item[13],
            TikTokShipBy: item[14],
            Priority: item[15],
            Factory: item[16],
            ProductionNote: item[17],
            QCNote: item[18],
            Status: item[19]
        }));

        // B·ªè 2 d√≤ng ƒë·∫ßu v√† l·ªçc b·ªè c√°c d√≤ng kh√¥ng c√≥ orderId
        newSheet.shift();
        newSheet.shift();
        return newSheet.filter(item => item.orderId !== null);
    } catch (error) {
        console.error('Error reading Excel file:', error);
        throw error;
    }
}

/**
 * H√†m h·ªó tr·ª£ ƒë·ªÉ ch·ªçn c√°c thu·ªôc t√≠nh c·∫ßn thi·∫øt
 * @param {Object} object - ƒê·ªëi t∆∞·ª£ng c·∫ßn l·∫•y thu·ªôc t√≠nh
 * @param {Array} properties - M·∫£ng t√™n c√°c thu·ªôc t√≠nh c·∫ßn l·∫•y
 * @returns {Object} ƒê·ªëi t∆∞·ª£ng m·ªõi ch·ªâ ch·ª©a c√°c thu·ªôc t√≠nh ƒë∆∞·ª£c ch·ªçn
 */
function pickProperties(object, properties) {
    return properties.reduce((acc, prop) => {
        acc[prop] = object[prop];
        return acc;
    }, {});
}

/**
 * H√†m h·ªó tr·ª£ ƒë·ªÉ chu·∫©n h√≥a chu·ªói
 * @param {string} item - Chu·ªói c·∫ßn chu·∫©n h√≥a
 * @returns {string} Chu·ªói ƒë√£ ƒë∆∞·ª£c chu·∫©n h√≥a
 */
function trimlower(item) {
    return item.trim().toLowerCase().replace(/\s+/g, '');
}

/**
 * Map d·ªØ li·ªáu sheet v·ªõi GLLM
 * @param {Array} sheet - D·ªØ li·ªáu t·ª´ Excel
 * @param {Array} gllm - D·ªØ li·ªáu GLLM
 * @returns {Array} D·ªØ li·ªáu ƒë√£ ƒë∆∞·ª£c map
 */
function mapSheetGllm(sheet, gllm) {
    // L·ªçc v√† x·ª≠ l√Ω GLLM


    const processedGllm = gllm
        .filter(item => item.hight !== null)
        .map(item => ({
            ...item,
            hight: Number(item.hight),
            width: Number(item.width),
            box: item.box.split(",").map(Number),
            ProductType: item.ProductType,
            variant: item.variant,
            button: item.button || "normal",
            amountFile: (item.amountFile !== "1" && item.amountFile !== "2") ? "1" : item.amountFile,
            chayTuDong: item.chayTuDong,
            tag: item.tag
        }));


    // Map sheet v·ªõi GLLM
    return sheet.map(itemSheet => {
        const filteredGllm = processedGllm.filter(itemGllm =>
            _.intersection(itemGllm.ProductType, [trimlower(itemSheet.product)]).length !== 0 &&
            _.intersection(itemGllm.variant, [trimlower(itemSheet.variant)]).length !== 0
        );

        if (filteredGllm.length === 0) {
            return { ...itemSheet, addGllm: false };
        }

        const [firstFilteredItem] = filteredGllm;
        return {
            ...itemSheet,
            addGllm: true,
            ...pickProperties(firstFilteredItem, [
                'nameId', 'box', 'button', 'direction',
                'width', 'hight', 'amountFile', 'state', 'status',
                'chayTuDong', 'tag'
            ])
        };
    });
}

/**
 * Nh√¢n b·∫£n items theo Quantity
 * @param {Array} excel - M·∫£ng items c·∫ßn nh√¢n b·∫£n
 * @returns {Array} M·∫£ng items ƒë√£ ƒë∆∞·ª£c nh√¢n b·∫£n
 */
function dupItemsExcel(excel) {
    // Nh√¢n b·∫£n items
    const newSheet = excel.flatMap(item =>
        Array(item.Quantity).fill().map(() => ({ ...item }))
    );

    // Th√™m s·ªë th·ª© t·ª±
    const sheetWithStt = newSheet.map((item, key) => ({
        ...item,
        stt: key + 1
    }));

    // T√≠nh QuantityAll
    const orderIdCount = sheetWithStt.reduce((acc, item) => {
        acc[item.orderId] = (acc[item.orderId] || 0) + 1;
        return acc;
    }, {});

    return sheetWithStt.map(item => ({
        ...item,
        QuantityAll: orderIdCount[item.orderId]
    }));
}

/**
 * S·∫Øp x·∫øp sheet theo c√°c ti√™u ch√≠
 * @param {Array} sheet - M·∫£ng c·∫ßn s·∫Øp x·∫øp
 * @returns {Array} M·∫£ng ƒë√£ ƒë∆∞·ª£c s·∫Øp x·∫øp
 */
function sortSheet(sheet) {
    const product = sheet[0].button;

    // X·ª≠ l√Ω ƒë·∫∑c bi·ªát cho Acrylic Plaque
    if (product === "Acrylic Plaque") {
        const arr5 = _.chunk(sheet.filter(item =>
            ["A.Plaque6x8in", "DZT-Plaque6x8", "wood-Plaque6x8in", "2M-Plaque6x8inTMZ"].includes(item.nameId)
        ), 5);

        const arr1 = sheet.filter(item =>
            ["A.Plaque4x6in", "DZT-Plaque4x6", "wood-Plaque4x6in"].includes(item.nameId)
        );

        if (arr5.length > arr1.length) {
            return _.flattenDeep(arr5.map((arr, i) =>
                arr1[i] ? [...arr, arr1[i]] : arr
            ));
        }

        return _.flattenDeep(arr1.map((arr, i) =>
            arr5[i] ? [...arr5[i], arr] : arr
        ));
    }

    // S·∫Øp x·∫øp theo c√°c ti√™u ch√≠ kh√°c
    if (SortByProduct.variant_orderId_sku.includes(product)) {
        return _.orderBy(sheet, ['variant', 'orderId', 'sku'], ['asc', 'asc', 'asc'])
            .map((item, key) => ({ ...item, stt: key + 1 }));
    }

    if (SortByProduct.nameId_orderId_sku.includes(product)) {
        return _.orderBy(sheet, ['nameId', 'orderId', 'sku'], ['asc', 'asc', 'asc'])
            .map((item, key) => ({ ...item, stt: key + 1 }));
    }

    if (SortByProduct.width_orderId_sku.includes(product)) {
        return _.orderBy(sheet, ['width', 'orderId', 'sku'], ['asc', 'asc', 'asc'])
            .map((item, key) => ({ ...item, stt: key + 1 }));
    }

    return _.orderBy(sheet, ['orderId', 'variant', 'sku'], ['asc', 'asc', 'asc'])
        .map((item, key) => ({ ...item, stt: key + 1 }));
}

/**
 * Ki·ªÉm tra ƒëi·ªÅu ki·ªán ungtoll
 * @param {Array} excel - M·∫£ng c·∫ßn ki·ªÉm tra
 * @returns {number} K·∫øt qu·∫£ ki·ªÉm tra (0, 1, ho·∫∑c 2)
 */
function checkungtoll(excel) {
    const state = _.uniq(excel.map(item => item.state));
    const status = _.uniq(excel.map(item => item.status));

    if (state.length === 1 && status[0] === "1") return 1;
    if (state.length !== 1 && status.includes("1")) return 0;
    return 2;
}

/**
 * H√†m ch√≠nh x·ª≠ l√Ω file Excel
 * @param {string} url - ƒê∆∞·ªùng d·∫´n file Excel
 * @returns {Promise<{stt: number, value: Object}>} K·∫øt qu·∫£ x·ª≠ l√Ω
 */
async function InPutexcel(url) {
    try {
        // ƒê·ªçc file Excel
        const sheet = await FetchXLSX(url);
        if (!sheet || sheet.length === 0) {
            throw new Error('Excel file is empty or invalid');
        }

        // L·∫•y d·ªØ li·ªáu GLLM
        let gllm;
        // H√†m retry fetch GLLM v·ªõi interval 1 ph√∫t
        const fetchGLLMWithRetry = async () => {
            return new Promise((resolve, reject) => {
                const attemptFetch = async () => {
                    try {
                        console.log('üîÑ ƒêang th·ª≠ fetch GLLM...');
                        const result = await FetchGLLM();
                        console.log('‚úÖ Fetch GLLM th√†nh c√¥ng!');
                        resolve(result);
                    } catch (error) {
                        console.error('‚ùå L·ªói fetch GLLM:', error.message);
                        console.log('‚è∞ S·∫Ω th·ª≠ l·∫°i sau 1 ph√∫t...');
                        // Th·ª≠ l·∫°i sau 1 ph√∫t (60000ms)
                        setTimeout(attemptFetch, 60000);
                    }
                };

                // B·∫Øt ƒë·∫ßu th·ª≠ l·∫ßn ƒë·∫ßu
                attemptFetch();
            });
        };

        gllm = await fetchGLLMWithRetry();

        // X·ª≠ l√Ω d·ªØ li·ªáu
        const excel = await mapSheetGllm(sheet, gllm);



        return excel;
    } catch (error) {
        console.error('Error in InPutexcel:', error);
        throw error;
    }
}

module.exports = {
    InPutexcel,
    FetchXLSX
};
