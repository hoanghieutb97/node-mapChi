const fs = require("fs");
const path = require("path");
const os = require("os");
const { spawn } = require("child_process");

/**
 * Ch·∫°y file Python extract_stop.py ƒë·ªÉ tr√≠ch xu·∫•t Stop Sequence
 * @param {string} pdfPath - ƒê∆∞·ªùng d·∫´n ƒë·∫øn file PDF
 */
async function processPDF(pdfPath) {
  try {
    console.log(`üìÑ ƒêang x·ª≠ l√Ω file PDF: ${pdfPath}`);
    
    // Ki·ªÉm tra file c√≥ t·ªìn t·∫°i kh√¥ng
    if (!fs.existsSync(pdfPath)) {
      console.log(`‚ùå File PDF kh√¥ng t·ªìn t·∫°i: ${pdfPath}`);
      return;
    }

    // L·∫•y t√™n user hi·ªán t·∫°i
    const currentUser = os.userInfo().username || process.env.USERNAME || process.env.USER || 'admin';
    const pythonScriptPath = path.join('C:', 'Users', currentUser, 'Desktop', 'serverEMB', 'extract_stop.py');
    
    // Ki·ªÉm tra file Python c√≥ t·ªìn t·∫°i kh√¥ng
    if (!fs.existsSync(pythonScriptPath)) {
      console.log(`‚ùå File Python kh√¥ng t·ªìn t·∫°i: ${pythonScriptPath}`);
      return;
    }

    console.log(`üêç ƒêang ch·∫°y file Python: ${pythonScriptPath}`);
    
    // Ch·∫°y file Python
    return new Promise((resolve, reject) => {
      const pythonProcess = spawn('python', [pythonScriptPath], {
        cwd: path.dirname(pythonScriptPath),
        stdio: ['pipe', 'pipe', 'pipe']
      });

      let outputData = '';
      let errorData = '';

      pythonProcess.stdout.on('data', (data) => {
        outputData += data.toString();
      });

      pythonProcess.stderr.on('data', (data) => {
        errorData += data.toString();
      });

      pythonProcess.on('close', (code) => {
        if (code === 0) {
          try {
            console.log('üîç Raw output t·ª´ Python:');
            console.log(outputData);
            console.log('‚îÄ'.repeat(60));
            
            // T√¨m JSON array ho·∫∑c object trong output
            let jsonMatch = outputData.match(/\[[\s\S]*\]/); // T√¨m array tr∆∞·ªõc
            if (!jsonMatch) {
              jsonMatch = outputData.match(/\{[\s\S]*\}/); // T√¨m object n·∫øu kh√¥ng c√≥ array
            }
            
            if (jsonMatch) {
              const jsonString = jsonMatch[0];
              const jsonData = JSON.parse(jsonString);
              console.log('‚úÖ so buoc chi da lay ***************************:');
              console.log(JSON.stringify(jsonData, null, 2));
              
            } else {
              console.log('‚ùå Kh√¥ng t√¨m th·∫•y JSON trong output Python');
              resolve(null);
            }
          } catch (parseError) {
            console.error('‚ùå L·ªói parse JSON:', parseError.message);
            console.log('üîç JSON string g√¢y l·ªói:');
            console.log(jsonMatch ? jsonMatch[0] : 'Kh√¥ng t√¨m th·∫•y JSON');
            resolve(null);
          }
        } else {
          console.error(`‚ùå Python script l·ªói v·ªõi code: ${code}`);
          console.error('Error:', errorData);
          reject(new Error(`Python script failed with code ${code}`));
        }
      });

      pythonProcess.on('error', (error) => {
        console.error('‚ùå L·ªói ch·∫°y Python script:', error.message);
        reject(error);
      });
    });
    
  } catch (error) {
    console.error("‚ùå L·ªói khi x·ª≠ l√Ω PDF:", error.message);
  }
}

/**
 * Ch·ªù file xu·∫•t hi·ªán v·ªõi timeout
 * @param {string} filePath - ƒê∆∞·ªùng d·∫´n file c·∫ßn ch·ªù
 * @param {number} timeoutMs - Th·ªùi gian ch·ªù t·ªëi ƒëa (ms)
 * @returns {Promise<boolean>} - True n·∫øu file xu·∫•t hi·ªán, False n·∫øu timeout
 */
function waitForFile(filePath, timeoutMs = 10000) {
  return new Promise((resolve) => {
    const startTime = Date.now();
    
    const checkFile = () => {
      try {
        if (fs.existsSync(filePath)) {
          // Ki·ªÉm tra th√™m xem file c√≥ th·ªÉ ƒë·ªçc ƒë∆∞·ª£c kh√¥ng
          const stats = fs.statSync(filePath);
          if (stats.size > 0) {
            console.log(`‚úÖ File ƒë√£ xu·∫•t hi·ªán sau ${Date.now() - startTime}ms (k√≠ch th∆∞·ªõc: ${stats.size} bytes)`);
            // Ch·ªù th√™m 1 gi√¢y ƒë·ªÉ ƒë·∫£m b·∫£o file ƒë√£ ƒë∆∞·ª£c ghi ho√†n to√†n
            setTimeout(() => resolve(true), 1000);
            return;
          } else {
            console.log(`‚è≥ File t·ªìn t·∫°i nh∆∞ng r·ªóng, ch·ªù th√™m...`);
          }
        }
      } catch (error) {
        console.log(`‚è≥ L·ªói ki·ªÉm tra file: ${error.message}, th·ª≠ l·∫°i...`);
      }
      
      const elapsed = Date.now() - startTime;
      if (elapsed >= timeoutMs) {
        console.log(`‚è∞ Timeout sau ${timeoutMs}ms - File kh√¥ng xu·∫•t hi·ªán ho·∫∑c kh√¥ng th·ªÉ ƒë·ªçc`);
        resolve(false);
        return;
      }
      
      // Ki·ªÉm tra l·∫°i sau 200ms
      setTimeout(checkFile, 200);
    };
    
    checkFile();
  });
}

/**
 * X·ª≠ l√Ω file PDF trong th∆∞ m·ª•c fileEMB
 */
async function processEMBFile() {
  const currentUser = os.userInfo().username || process.env.USERNAME || process.env.USER || 'admin';
  const pdfPath = path.join('C:', 'Users', currentUser, 'Desktop', 'serverEMB', 'fileEMB', 'file.pdf');
  
  console.log('üîÑ B·∫Øt ƒë·∫ßu x·ª≠ l√Ω file PDF sau s·ª± ki·ªán ghi ƒë√®...');
  console.log(`üìÇ ƒêang ch·ªù file: ${pdfPath}`);
  
  // Ch·ªù file PDF xu·∫•t hi·ªán t·ªëi ƒëa 10 gi√¢y
  const fileExists = await waitForFile(pdfPath, 10000);
  
  if (fileExists) {
    await processPDF(pdfPath);
  } else {
    console.log('‚ùå Kh√¥ng th·ªÉ x·ª≠ l√Ω PDF - File kh√¥ng xu·∫•t hi·ªán trong th·ªùi gian ch·ªù');
  }
}

module.exports = {
  processPDF,
  processEMBFile
}; 