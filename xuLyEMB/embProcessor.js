const fs = require('fs');
const path = require('path');
const os = require('os');
const { spawn } = require('child_process');
const { log } = require('console');

/**
 * X·ª≠ l√Ω file EMB t·ª´ ƒë∆∞·ªùng d·∫´n m·∫°ng LAN
 * @param {string} networkPath - ƒê∆∞·ªùng d·∫´n m·∫°ng LAN ch·ª©a file EMB
 * @returns {Object} - K·∫øt qu·∫£ x·ª≠ l√Ω
 */
function processEMBFile(networkPath) {
  try {
    console.log(`   üìÇ ƒê∆∞·ªùng d·∫´n: ${networkPath}`);

    // Ki·ªÉm tra th∆∞ m·ª•c c√≥ t·ªìn t·∫°i kh√¥ng
    if (!fs.existsSync(networkPath)) {
      console.log('‚ùå Th∆∞ m·ª•c kh√¥ng t·ªìn t·∫°i');
      return {
        success: false,
        error: 'Th∆∞ m·ª•c kh√¥ng t·ªìn t·∫°i',
        message: `Kh√¥ng t√¨m th·∫•y th∆∞ m·ª•c: ${networkPath}`,
        statusCode: 404
      };
    }

    // T√¨m t·∫•t c·∫£ file .emb trong th∆∞ m·ª•c
    const files = fs.readdirSync(networkPath);
    const embFiles = files.filter(file => file.toLowerCase().endsWith('.emb'));
    
    console.log(embFiles);
    // Ki·ªÉm tra s·ªë l∆∞·ª£ng file EMB
    if (embFiles.length === 0) {
      console.log('‚ùå Kh√¥ng t√¨m th·∫•y file .emb n√†o');
      return {
        success: false,
        error: 'Kh√¥ng t√¨m th·∫•y file EMB',
        message: `Kh√¥ng c√≥ file .emb n√†o trong th∆∞ m·ª•c: ${networkPath}`,
        foundFiles: files,
        statusCode: 404
      };
    }

    if (embFiles.length > 1) {
      console.log('‚ùå C√≥ nhi·ªÅu file .emb - kh√¥ng th·ªÉ x·ª≠ l√Ω');
      return {
        success: false,
        error: 'C√≥ nhi·ªÅu file EMB',
        message: `T√¨m th·∫•y ${embFiles.length} file .emb, ch·ªâ cho ph√©p 1 file`,
        embFiles: embFiles,
        statusCode: 400
      };
    }

    // Ch·ªâ c√≥ 1 file EMB - x·ª≠ l√Ω copy
    const sourceFile = embFiles[0];
    const sourcePath = path.join(networkPath, sourceFile);

    // L·∫•y t√™n user hi·ªán t·∫°i b·∫±ng nhi·ªÅu c√°ch
    const currentUser = os.userInfo().username || process.env.USERNAME || process.env.USER || 'admin';
    const targetPath = path.join('C:', 'Users', currentUser, 'Desktop', 'serverEMB', 'fileEMB', 'file.emb');

    // T·∫°o th∆∞ m·ª•c fileEMB n·∫øu ch∆∞a c√≥
    const fileEMBDir = path.join('C:', 'Users', currentUser, 'Desktop', 'serverEMB', 'fileEMB');
    if (!fs.existsSync(fileEMBDir)) {
      fs.mkdirSync(fileEMBDir, { recursive: true });
    }

    // X√≥a t·∫•t c·∫£ file c≈© trong th∆∞ m·ª•c fileEMB (tu·∫ßn t·ª±)
    console.log('üóëÔ∏è B·∫Øt ƒë·∫ßu x√≥a file c≈© trong th∆∞ m·ª•c fileEMB...');
    const existingFiles = fs.readdirSync(fileEMBDir);
    
    if (existingFiles.length === 0) {
      console.log('üìÅ Th∆∞ m·ª•c fileEMB ƒë√£ tr·ªëng');
    } else {
      // X√≥a t·ª´ng file m·ªôt c√°ch tu·∫ßn t·ª±
      for (let i = 0; i < existingFiles.length; i++) {
        const file = existingFiles[i];
        const filePath = path.join(fileEMBDir, file);
        try {
          fs.unlinkSync(filePath);
        } catch (error) {
        }
      }
      
      console.log('‚úÖ Ho√†n th√†nh x√≥a file c≈©');
    }

    // Copy file EMB
    try {
      fs.copyFileSync(sourcePath, targetPath);
      const fileStats = fs.statSync(targetPath);
      console.log('‚úÖ COPY FILE TH√ÄNH C√îNG:');

      // Ch·∫°y xuLyEMB.exe
      const exeResult = runXuLyEMB(currentUser);
      
      return {
        success: true,
        message: 'X·ª≠ l√Ω file EMB th√†nh c√¥ng',
        sourceFile: sourceFile,
        targetPath: targetPath,
        fileSize: fileStats.size,
        exeResult: exeResult,
        timestamp: new Date().toISOString()
      };

    } catch (copyError) {
      console.error('‚ùå L·ªñI COPY FILE:', copyError);
      return {
        success: false,
        error: 'L·ªói copy file EMB',
        message: copyError.message,
        source: sourcePath,
        target: targetPath,
        statusCode: 500
      };
    }

  } catch (error) {
    console.error('‚ùå L·ªói x·ª≠ l√Ω file EMB:', error);
    return {
      success: false,
      error: 'L·ªói x·ª≠ l√Ω file EMB',
      message: error.message,
      statusCode: 500
    };
  }
}

/**
 * Ch·∫°y xuLyEMB.exe
 * @param {string} currentUser - T√™n user hi·ªán t·∫°i
 * @returns {Object} - K·∫øt qu·∫£ ch·∫°y exe
 */
function runXuLyEMB(currentUser) {
  const exePath = path.join('C:', 'Users', currentUser, 'Desktop', 'serverEMB', 'xulyEMB_autoIT', 'xuLyEMB.exe');
  
  if (fs.existsSync(exePath)) {
    try {
      const child = spawn(exePath, [], {
        cwd: path.dirname(exePath),
        detached: true,
        stdio: 'ignore'
      });

      child.unref();
      console.log(`   ‚úÖ ƒê√£ kh·ªüi ch·∫°y xuLyEMB.exe (PID: ${child.pid})`);
      
      return {
        success: true,
        pid: child.pid,
        message: 'ƒê√£ kh·ªüi ch·∫°y xuLyEMB.exe th√†nh c√¥ng'
      };
    } catch (exeError) {
      console.log(`   ‚ùå L·ªói kh·ªüi ch·∫°y xuLyEMB.exe: ${exeError.message}`);
      return {
        success: false,
        error: exeError.message,
        message: 'L·ªói kh·ªüi ch·∫°y xuLyEMB.exe'
      };
    }
  } else {
    console.log(`   ‚ùå Kh√¥ng t√¨m th·∫•y file: ${exePath}`);
    return {
      success: false,
      error: 'File kh√¥ng t·ªìn t·∫°i',
      message: `Kh√¥ng t√¨m th·∫•y file: ${exePath}`
    };
  }
}

module.exports = {
  processEMBFile,
  runXuLyEMB
}; 